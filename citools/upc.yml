#
# Copyright (c) 2017 GATBLAU - www.gatblau.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Manages the execution of roles on a docker container.
# The only part of this playbook that needs changing is the list of roles as described below.
# The name of the playbook should be updated to reflect the host name - e.g. database.yml
#
#
# Provides the containers required to deploy CI Tools
#
---
- name: Set variables for {{ blueprint }}
  include_vars:
    file: "./host_vars/blueprints/{{ blueprint }}.yml"

- block:
  - name: Define facts for Docker containers (not silicon)
    set_fact:
      ci_base: "gatblau.org/centos:7ds"
      dkr_containers:
        - ci-a
        - ci-b
        - ci-c
        - ci-d
        - ci-e
        - ci-dit-pamm
        - ci-dit-jamm
      dkr_volumes:
        - /sys/fs/cgroup:/sys/fs/cgroup:ro
        - /var/cache/yum/neus:/var/cache/yum:rw

  - name: Building the base Docker image for test containers
    docker_image:
      name: "gatblau.org/centos"
      tag:  "7ds"
      path: "{{ playbook_dir }}/../lib/images/centos7ds"
  when: blueprint != "silicon"

- name: Define facts for Silicon blueprint Docker containers
  set_fact:
    ci_base: "centos:7"
    dkr_containers:
      - ci-jenkins
      - ci-buildtools
      - ci-nexus
      - ci-mariadb
      - ci-gogs
      - ci-nexus
    dkr_volumes:
      - /var/cache/yum/neus:/var/cache/yum:rw
  when: blueprint == "silicon"

- name: Delete existing Docker containers
  become: yes
  docker_container:
    name:  "{{ item }}"
    image: "{{ ci_base }}"
    state: absent
    force_kill: true
  with_items:
    - "{{ dkr_containers }}"

- name: Start up CI Tools Docker containers
  docker_container:
    image: "{{ ci_base }}"
    name: "{{ item.key }}"
    hostname: "{{ item.key }}"
    detach: yes
    tty: yes
    exposed_ports: "[ {{ item.value.ports }} ]"
    command: "/usr/sbin/init"
    state: started
    privileged: yes
    volumes: "{{ dkr_volumes }}"
  with_dict: "{{ containers }}"

- name: Start up PAMM DIT Docker containers
  docker_container:
    image: "{{ ci_base }}"
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    detach: yes
    tty: yes
    exposed_ports: "[ {{ item.ports }} ]"
    command: "/usr/sbin/init"
    state: started
    privileged: yes
    volumes: "{{ dkr_volumes }}"
  with_items:
    - { name: "ci-dit-pamm", ports: "{{ pamm_app_port }}, {{ pamm_test_port }}" }
  when: pamm == "yes" and blueprint != "silicon"

- name: Start up JAMM DIT Docker container
  docker_container:
    image: "{{ ci_base }}"
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    detach: yes
    tty: yes
    exposed_ports: "[ {{ item.ports }} ]"
    command: "/usr/sbin/init"
    state: started
    privileged: yes
    volumes: "{{ dkr_volumes }}"
  with_items:
    - { name: "ci-dit-jamm", ports: "{{ jamm_app_port }}" }
  when: jamm == "yes" and blueprint != "silicon"

- name: Set become and connection variables for Docker containers
  set_fact:
    become:     "no"
    connection: "docker"


- block: # Not Silicon blueprint
  # Obtain IP addresses of containers
  - name: Get ci-a IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-a"
    changed_when: false
    register: ci_a_ip

  - name: Get ci-b IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-b"
    changed_when: false
    register: ci_b_ip
    when:
      - blueprint != "basic"

  - name: Get ci-c IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-c"
    changed_when: false
    register: ci_c_ip
    when: blueprint == "silver" or blueprint == "gold"

  - name: Get ci-d IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-d"
    changed_when: false
    register: ci_d_ip
    when: blueprint == "silver" or blueprint == "gold"

  - name: Get ci-e IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-e"
    changed_when: false
    register: ci_e_ip
    when:
      - blueprint == "gold"

  - name: Get ci-dit-pamm IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-dit-pamm"
    changed_when: false
    register: ci_dit_pamm_ip
    when: pamm == "yes"

  - name: Get ci-dit-jamm IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-dit-jamm"
    changed_when: false
    register: ci_dit_jamm_ip
    when: jamm == "yes"

  # Set variables for Docker builds
  - name: Set Jenkins and Nexus IP addresses
    set_fact:
      jenkins_ip_address:  "{{ ci_a_ip.stdout }}"
      nexus_ip_address:    "{{ ci_a_ip.stdout }}"

  - name: Set GOGS, Sonar and database IP addresses (basic)
    set_fact:
      database_ip_address: "127.0.0.1"
      gogs_ip_address:     "{{ ci_a_ip.stdout }}"
      sonar_ip_address:    "{{ ci_a_ip.stdout }}"
    when: blueprint == "basic"

  - name: Set GOGS, Sonar and database IP addresses (bronze or silver)
    set_fact:
      database_ip_address: "127.0.0.1"
      gogs_ip_address:     "{{ ci_b_ip.stdout }}"
      sonar_ip_address:    "{{ ci_b_ip.stdout }}"
    when: blueprint == "bronze" or blueprint == "silver"

  - name: Set GOGS, Sonar and database IP addresses (gold)
    set_fact:
      database_ip_address: "{{ ci_d_ip.stdout }}"
      gogs_ip_address:     "{{ ci_e_ip.stdout }}"
      sonar_ip_address:    "{{ ci_e_ip.stdout }}"
    when: blueprint == "gold"

  - name: Set URLs for CI Tools
    set_fact:
      jenkins_url: "{{ jenkins_ip_address }}:{{ jenkins_port }}"
      nexus_url:   "{{ nexus_ip_address }}"
      gogs_url:    "http://{{ gogs_ip_address }}:{{ gogs_port }}"
      sonar_url:   "{{ sonar_ip_address }}"

  - name: Set PAMM DIT IP address
    set_fact:
      pamm_dit_ip_address: "{{ ci_dit_pamm_ip.stdout }}"
    when: pamm == "yes"

  - name: Set JAMM DIT IP Address
    set_fact:
      jamm_dit_ip_address: "{{ ci_dit_jamm_ip.stdout }}"
    when: jamm == "yes"

  when: blueprint != "silicon" # end block: Not Silicon blueprint

- block: # Silicon blueprint only
  - name: Get ci_mariadb IP address
    command: "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}' {% endraw %} ci-mariadb"
    register: ci_mariadb_ip

  - name: Set variables for Silicon blueprint
    set_fact:
      database_container: "{{ ci_mariadb_ip.stdout }}"
      database_ip_address: "${DB_IP_ADDRESS}"
      gogs_ip_address:     "${GOGS_IP_ADDRESS}"
      jenkins_ip_address:  "${JENKINS_IP_ADDRESS}"
      nexus_ip_address:    "${NEXUS_IP_ADDRESS}"
      sonar_ip_address:    "${SONAR_IP_ADDRESS}"
      remote_ip_address:   "${DIT_IP_ADDRESS}"
      jenkins_url:         "${JENKINS_IP_ADDRESS}"
      gogs_url:            "http://${GOGS_IP_ADDRESS}:${GOGS_PORT}"
      nexus_url:           "${NEXUS_IP_ADDRESS}"
      sonar_url:           "${SONAR_IP_ADDRESS}"
      jenkins_port: "${JENKINS_PORT}"
      nexus_port:   "${NEXUS_PORT}"
      gogs_port:    "${GOGS_PORT}"
      sonar_port:   "${SONAR_PORT}"
      image_version: "latest"

  when: blueprint == "silicon" # end block: Silicon blueprint only
...