#
# Copyright (c) 2016 GATBLAU - www.gatblau.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Manages the execution of roles on a docker container.
# The only part of this playbook that needs changing is the list of roles as described below.
# The name of the playbook should be updated to reflect the host name - e.g. database.yml
#

# This playbook creates a pamm-a environment on AWS EC2
#
# The variables used in this play are in inventory.txt
#
---
  - name: Create a security group
    local_action:
      module: ec2_group
      name: ci-tools-deployments
      description: Security Group for CI Tool deployments.
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3000
          to_port: 3000
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8081
          to_port: 8081
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3306
          to_port: 3306
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9000
          to_port: 9000
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Launch the new EC2 hosts
    local_action:
      module: ec2
      key_name: ec2user
      group: ci-tools-deployments
      instance_type: "{{ instance_type }}"
      image: ami-8b8c57f8     # RHEL 7.2 image
      wait: true
      region: "{{ region }}"
      zone: "{{ zone }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      exact_count: 2
      count_tag:
        Name: "{{tag_name}}"
      instance_tags:
        Name: "{{tag_name}}"
    register: ec2

  - debug: var=item
    with_items: ec2.instances

  - name: Wait for EC2 host to initialise
    local_action: wait_for
                  host="{{item.public_ip}}"
                  port=22
                  delay=30
                  timeout=360
                  state=started
    with_items: ec2.instances

  - name: Tag new EC2 host(s)
    local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
    with_items: ec2.instances
    args:
      tags:
        Name: "{{tag_name}}"

  - name:  Add AWS EC2 host and set variables for ci-a deployment
    add_host: groups=ci
              hostname=ci-a
              ansible_host="{{ec2.instances[0].public_dns_name}}"
              ansible_ssh_private_key_file="keys/ec2user.pem"
              ansible_user="ec2-user"
              ansible_port=22
              become="yes"
              connection="ssh"

  - name:  Add AWS EC2 host and set variables for ci-b deployment
    add_host: groups=ci
              hostname=ci-b
              ansible_host="{{ec2.instances[1].public_dns_name}}"
              ansible_ssh_private_key_file="keys/ec2user.pem"
              ansible_user="ec2-user"
              ansible_port=22
              database_port=3306
              become="yes"
              connection="ssh"

  - name:  Add AWS EC2 host and set variables for ci-dit deployment
    add_host: groups=ci
              hostname=ci-dit
              ansible_host="{{ci_dit_public_dns_name}}"
              ansible_ssh_private_key_file="keys/ec2user.pem"
              ansible_user="ec2-user"
              ansible_port=22
              database_port=3306
              become="yes"
              connection="ssh"

  - set_fact:
      database_ip_address="127.0.0.1"
      gogs_ip_address="{{ec2.instances[1].public_dns_name}}"
      nexus_ip_address="{{ec2.instances[1].public_dns_name}}"
      sonar_ip_address="{{ec2.instances[1].public_dns_name}}"
      remote_ip_address="{{ci_dit_public_dns_name}}"
